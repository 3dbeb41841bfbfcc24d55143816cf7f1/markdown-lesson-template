#!/usr/bin/env node

let fs = require("fs");
let path = require("path");

// Use an IIFE to hide the Implementation methods
let TemplateProcessor = (function() {

  // The private Implementation class
  class TemplateProcessorImpl {
    constructor(template, baseDir) {
      this.content = template;
      this.baseDir = baseDir;
    }

    /** Create a Table of Contents. A TOC entry will be generated
      * for each header of level 2 or greater (lines starting with '##')
    **/
    _makeTOC() {
      let headerPattern = /##.*/g  // include headers at level 2 and up
      let tocHeaders = this.content.match(headerPattern);
      let toc = tocHeaders.map( h => {
        let level = 0;
        while(h[++level] === '#');
        let guts = h.substring(level).trim();
        let link = guts
        .toLowerCase()
        .replace(/\s/g, '-')
        .replace(/,|_|!|\/|\`|\'|\.|\*|\(|\)|#|:|\?/g, '');
        let tocItem = guts.replace(/\(.*\)/g, '').trim();
        let indent = '  '.repeat(level-2);  // indent nested toc lines
        return indent + '* [' + tocItem + '](#' + link + ')';
      });

      toc.unshift('## Table of Contents\n');
      return toc.join('\n');
    }

    _generateOutputFromCommand(command, args) {
      const execFileSync = require('child_process').execFileSync;
      console.log(`Executing: '${command} ${args.join(' ')}'`);
      try {
        return execFileSync(command, args, { encoding: 'utf-8' }).replace(/[\r\n]*$/, "");
      }
      catch (err) {
        // console.error(err.stack);
        if (err.pid) {
          console.log('%s (pid: %d) exited with status %d', err.file, err.pid, err.status);
        }
        return err;
      }
    }

    /** Process the template, searching for double curly braces (i.e. {{embeddedExpression}} )
      *  - {{TOC}}              - will cause a Table of Contents to be generated and inserted into the placeholder
      *  - {{embeddedFileName}} - will cause the file contents to be inserted into the placeholder
     **/
    doTransclusions() {
      // regex for capturing {{path/file.js}}
      let regex = new RegExp("\\{\\{([^:\\}]+)\\}\\}", "g");

      this.content = this.content
      .replace(regex, embeddedExpression => {
        embeddedExpression = embeddedExpression.substr(2, embeddedExpression.length - 4).trim();
        if (embeddedExpression === 'TOC') {
          console.log('inserting TOC');
          return this._makeTOC();
        }
        else if (embeddedExpression.startsWith('exec(')) {
          let args = embeddedExpression.substring(5).replace(/\)/g, '').split(',');
          args = args.map( arg => arg.trim() );
          let command = args.shift();
          let output = this._generateOutputFromCommand(command, args);
          console.log(`  Transcluding output of '%s'`, embeddedExpression);
          return output;
        }
        else {
          console.log(`Transcluding '%s'`, embeddedExpression);
          return fs.readFileSync(path.join(this.baseDir, embeddedExpression), 'utf-8').replace(/[\r\n]*$/, "");
        }
      });

      return this;
    }

    /**
      * Insert a comment after the first level 1 heading
     **/
    insertComment() {
      let regex = /\# .*/;
      let comment = `<!--
This file is auto-generated from a 'template.md'
file using the 'md-process' script.
Therefore *DO NOT* edit this file directly!
Instead edit the template file and then run 'md-process'.
-->
`
      this.content = this.content.replace(regex, function(topHeader) {
        console.log('Inserting comment before topHeader:', topHeader);
        return comment + '\n' + topHeader;
      });

      return this;
    }
  }

  // The public class
  class TemplateProcessor {
    constructor(templateFile, outputFile, baseDir) {
      this.templateFile = templateFile;
      this.outputFile = outputFile;
      this.baseDir = baseDir;
    }

    process() {
      console.log(`Processing '${this.templateFile}' ==> '${this.outputFile}'.`);
      let templateContent = fs.readFileSync(this.templateFile, "utf-8");
      let outputContent = new TemplateProcessorImpl(templateContent, this.baseDir)
      .insertComment()
      .doTransclusions()
      .content;
      fs.writeFile(this.outputFile, outputContent, "utf-8", () => { console.log(`=== Generated ${this.outputFile}! ===`); });
    }
  }

  return TemplateProcessor;
})();

class Options {
  constructor(clArgs) {
    // set default values
    this.inputFile = 'template.md';
    this.outputFile = 'readme.md';
    this._processCommandLineArgs(clArgs);
  }

  _getSafeValue(originalValue, newValue) {
    return newValue ? newValue : originalValue;
  }

  _processCommandLineArgs(clArgs) {
    for (let index = 0; index < clArgs.length; index++) {
      let val = clArgs[index];
      switch(val) {
        case '-i': this.inputFile  = this._getSafeValue(this.inputFile,  clArgs[++index]); break;
        case '-o': this.outputFile = this._getSafeValue(this.outputFile, clArgs[++index]); break;
        default:
          console.log('Option %s not recognized.', val);
          break;
      }
    }
  }
}

let cwd = process.cwd();
let clArgs = process.argv;
// console.log('clArgs:', clArgs);
clArgs.splice(0, 2);
// console.log('clArgs:', clArgs);
if (clArgs.length > 0) {
  let options = new Options(clArgs);
  new TemplateProcessor(options.inputFile, options.outputFile, cwd).process();
}
else {
  // console.log('no options found.');
  let regex = new RegExp(".*-template.md");
  let templateFiles = fs.readdirSync(cwd).filter(f => regex.test(f));
  console.log('templateFiles:', templateFiles);
  templateFiles.forEach( inputFile => {
    let outputFile = inputFile.replace(/-template.md/, '.md');
    new TemplateProcessor(inputFile, outputFile, cwd).process();
  });
}
